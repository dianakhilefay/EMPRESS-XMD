// === iwner.js ===
// Owner contact command using built-in msg.js vCard system
const fakevCard = require('../lib/fakevcard');

module.exports = {
    pattern: "owner",
    alias: ["creator", "dev"],
    category: "main",
    desc: "Send bot owner's contact vCard",
    react: "üìû",
    filename: __filename,
    use: ".owner",
    
    execute: async (conn, mek, m, { from, args, reply }) => {
        try {
            // Get owner info from environment variables or use defaults
            const ownerName = process.env.OWNER_NAME || "·¥ç·¥Ä ü·¥†…™…¥ ·¥ã…™…¥…¢";
            const ownerNumber = process.env.OWNER_NUMBER || "263780958186";
            
            // React with contact emoji
            await conn.sendMessage(from, { react: { text: 'üìû', key: mek.key } });

            // Create vCard manually like in msg.js
            const vcard = 'BEGIN:VCARD\n' + 
                         'VERSION:3.0\n' + 
                         'FN:' + ownerName + '\n' + 
                         'ORG:ü§ñ Bot Owner & Developer;\n' + 
                         'TEL;type=CELL;type=VOICE;waid=' + ownerNumber + ':+' + ownerNumber + '\n' + 
                         'END:VCARD';

            // Send vCard contact
            await conn.sendMessage(from, {
                contacts: {
                    displayName: ownerName,
                    contacts: [{ vcard }]
                }
            }, { quoted: fakevCard });

            // Send additional info message with Mercedes style
            await conn.sendMessage(from, {
                text: `*‚îè‚îÄ‚îÄ‚îÄ‚îÄ„Äò ·¥è·¥°…¥·¥á Ä …™…¥Íú∞·¥è „Äô‚îÄ‚îÄ‚îÄ‚ä∑*
*‚îÉ  üë§ Name:* ${ownerName}
*‚îÉ  üì± Number:* +${ownerNumber}
*‚îÉ  üíº Role:* Bot Developer
*‚îÉ  üåê Status:* Online üü¢
*‚îÉ  üìß Support:* Available 24/7
*‚îó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*

*üí¨ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥°…¥·¥á Ä Íú∞·¥è Ä:*
‚Ä¢ Bot Support & Issues
‚Ä¢ Feature Requests  
‚Ä¢ Business Inquiries
‚Ä¢ Technical Help

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ç·¥Ä ü·¥†…™…¥ -  ü…™·¥õ·¥á`,
                contextInfo: {
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: "120363402507750390@newsletter",
                        newsletterName: "·¥ç·¥Ä ü·¥†…™…¥ ·¥õ·¥á·¥Ñ úü™Ä",
                        serverMessageId: 200
                    },
                    externalAdReply: {
                        title: "üìû ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ",
                        body: `${ownerName} -  ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä`,
                        thumbnailUrl: "https://files.catbox.moe/x7qky4.jpg",
                        sourceUrl: "https://github.com/XdKing2/MALVIN-XD",
                        mediaType: 1,
                        renderLargerThumbnail: true
                    }
                }
            }, { quoted: fakevCard });

        } catch (error) {
            console.error('Owner command error:', error);
            await conn.sendMessage(from, {
                text: `‚ùå *·¥á Ä Ä·¥è Ä*

Failed to send owner contact. Please try again later.

*Error:* ${error.message}`,
                contextInfo: fakevCard
            });
            
            await m.react("‚ùå");
        }
    }
};
